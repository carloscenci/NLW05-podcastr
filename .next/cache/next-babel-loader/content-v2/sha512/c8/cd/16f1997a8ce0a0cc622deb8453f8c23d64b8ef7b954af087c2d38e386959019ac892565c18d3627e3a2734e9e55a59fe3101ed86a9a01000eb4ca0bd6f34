{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/carlos/Documentos/NLW5 - 2021/react/NLW05-podcastr/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setcurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setcurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setcurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n    } else if (hasNext) {\n      setcurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setcurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      isPlaying: isPlaying,\n      isLooping: isLooping,\n      isShuffling: isShuffling,\n      togglePlay: togglePlay,\n      toggleLoop: toggleLoop,\n      setPlayingState: setPlayingState,\n      playList: playList,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious,\n      toggleShuffle: toggleShuffle\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerContextProvider, \"Tw42TVNuCUNRJrudy+skQHyNJ+A=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/carlos/Documentos/NLW5 - 2021/react/NLW05-podcastr/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setcurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n}\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;\n    isPlaying: boolean;\n    isLooping: boolean;\n    isShuffling: boolean;\n    play: (episode: Episode) => void;\n    setPlayingState: (state: boolean) => void;\n    togglePlay: () => void;\n    toggleLoop: () => void;\n    playList: (list: Episode[], index: number) => void;\n    playNext: () => void;\n    playPrevious: () => void;\n    toggleShuffle: () => void;\n    hasNext: boolean;\n    hasPrevious: boolean;\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n    children: ReactNode\n}\n\nexport function PlayerContextProvider({ children } : PlayerContextProviderProps) {\n    const [episodeList, setEpisodeList] = useState([]);\n    const [currentEpisodeIndex, setcurrentEpisodeIndex] = useState(0);\n    const [ isPlaying, setIsPlaying ] = useState(false);\n    const [ isLooping, setIsLooping ] = useState(false);\n    const [ isShuffling, setIsShuffling ] = useState(false);\n\n    function play(episode: Episode) {\n        setEpisodeList([episode]);\n        setcurrentEpisodeIndex(0);\n        setIsPlaying(true);\n    }\n\n    function playList(list: Episode[], index: number) {\n        setEpisodeList(list);\n        setcurrentEpisodeIndex(index);\n        setIsPlaying(true);\n    }\n\n    function togglePlay() {\n        setIsPlaying(!isPlaying)\n    }\n\n    function toggleLoop() {\n        setIsLooping(!isLooping)\n    }\n    function toggleShuffle() {\n        setIsShuffling(!isShuffling)\n    }\n\n    function setPlayingState(state: boolean) {\n        setIsPlaying(state);\n    }\n\n    const hasPrevious = currentEpisodeIndex > 0;\n    const hasNext = (currentEpisodeIndex + 1) < episodeList.length;\n\n    function playNext() {\n        if(isShuffling) {\n            const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length)\n        } else if(hasNext) {\n            setcurrentEpisodeIndex(currentEpisodeIndex + 1);\n        }\n        \n    }\n\n    function playPrevious() {\n        if(hasPrevious) {\n            setcurrentEpisodeIndex(currentEpisodeIndex - 1);\n        }\n    }\n\n    return (\n        <PlayerContext.Provider value={{ \n            episodeList, \n            currentEpisodeIndex, \n            play, \n            isPlaying, \n            isLooping,\n            isShuffling,\n            togglePlay,\n            toggleLoop,\n            setPlayingState,\n            playList,\n            playNext,\n            playPrevious,\n            hasNext,\n            hasPrevious,\n            toggleShuffle\n        }}>\n            { children }\n        </PlayerContext.Provider>\n    )\n}\n\nexport const usePlayer = () => {\n    return useContext(PlayerContext)\n}"]},"metadata":{},"sourceType":"module"}