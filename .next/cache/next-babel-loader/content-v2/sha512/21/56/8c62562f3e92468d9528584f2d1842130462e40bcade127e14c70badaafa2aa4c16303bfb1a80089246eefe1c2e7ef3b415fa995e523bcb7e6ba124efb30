{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/carlos/Documentos/NLW5 - 2021/react/NLW05-podcastr/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState, useContext } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setcurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setcurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setcurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (hasNext) {\n      setcurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setcurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      isPlaying,\n      isLooping,\n      togglePlay,\n      toggleLoop,\n      setPlayingState,\n      playList,\n      playNext,\n      playPrevious,\n      hasNext,\n      hasPrevious\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["/home/carlos/Documentos/NLW5 - 2021/react/NLW05-podcastr/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setcurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","play","episode","playList","list","index","togglePlay","toggleLoop","setPlayingState","state","hasPrevious","hasNext","length","playNext","playPrevious","usePlayer"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,UAA7C,QAA+D,OAA/D;AA0BA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAMP,OAAO,SAASI,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA0E;AAC7E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACO,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDR,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAAES,SAAF;AAAA,OAAaC;AAAb,MAA8BV,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAAEW,SAAF;AAAA,OAAaC;AAAb,MAA8BZ,QAAQ,CAAC,KAAD,CAA5C;;AAEA,WAASa,IAAT,CAAcC,OAAd,EAAgC;AAC5BR,IAAAA,cAAc,CAAC,CAACQ,OAAD,CAAD,CAAd;AACAN,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAASK,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAC9CX,IAAAA,cAAc,CAACU,IAAD,CAAd;AACAR,IAAAA,sBAAsB,CAACS,KAAD,CAAtB;AACAP,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAASQ,UAAT,GAAsB;AAClBR,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH;;AAED,WAASU,UAAT,GAAsB;AAClBP,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH;;AAED,WAASS,eAAT,CAAyBC,KAAzB,EAAyC;AACrCX,IAAAA,YAAY,CAACW,KAAD,CAAZ;AACH;;AAED,QAAMC,WAAW,GAAGf,mBAAmB,GAAG,CAA1C;AACA,QAAMgB,OAAO,GAAIhB,mBAAmB,GAAG,CAAvB,GAA4BF,WAAW,CAACmB,MAAxD;;AAEA,WAASC,QAAT,GAAoB;AAEhB,QAAGF,OAAH,EAAY;AACRf,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;AACJ;;AAED,WAASmB,YAAT,GAAwB;AACpB,QAAGJ,WAAH,EAAgB;AACZd,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;AACJ;;AAED,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BF,MAAAA,WAD2B;AAE3BE,MAAAA,mBAF2B;AAG3BM,MAAAA,IAH2B;AAI3BJ,MAAAA,SAJ2B;AAK3BE,MAAAA,SAL2B;AAM3BO,MAAAA,UAN2B;AAO3BC,MAAAA,UAP2B;AAQ3BC,MAAAA,eAR2B;AAS3BL,MAAAA,QAT2B;AAU3BU,MAAAA,QAV2B;AAW3BC,MAAAA,YAX2B;AAY3BH,MAAAA,OAZ2B;AAa3BD,MAAAA;AAb2B,KAA/B;AAAA,cAeMlB;AAfN;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;AAED,OAAO,MAAMuB,SAAS,GAAG,MAAM;AAC3B,SAAO1B,UAAU,CAACC,aAAD,CAAjB;AACH,CAFM","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react';\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n}\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;\n    isPlaying: boolean;\n    isLooping: boolean;\n    play: (episode: Episode) => void;\n    setPlayingState: (state: boolean) => void;\n    togglePlay: () => void;\n    toggleLoop: () => void;\n    playList: (list: Episode[], index: number) => void;\n    playNext: () => void;\n    playPrevious: () => void;\n    hasNext: boolean;\n    hasPrevious: boolean;\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n    children: ReactNode\n}\n\nexport function PlayerContextProvider({ children } : PlayerContextProviderProps) {\n    const [episodeList, setEpisodeList] = useState([]);\n    const [currentEpisodeIndex, setcurrentEpisodeIndex] = useState(0);\n    const [ isPlaying, setIsPlaying ] = useState(false);\n    const [ isLooping, setIsLooping ] = useState(false);\n\n    function play(episode: Episode) {\n        setEpisodeList([episode]);\n        setcurrentEpisodeIndex(0);\n        setIsPlaying(true);\n    }\n\n    function playList(list: Episode[], index: number) {\n        setEpisodeList(list);\n        setcurrentEpisodeIndex(index);\n        setIsPlaying(true);\n    }\n\n    function togglePlay() {\n        setIsPlaying(!isPlaying)\n    }\n\n    function toggleLoop() {\n        setIsLooping(!isLooping)\n    }\n\n    function setPlayingState(state: boolean) {\n        setIsPlaying(state);\n    }\n\n    const hasPrevious = currentEpisodeIndex > 0;\n    const hasNext = (currentEpisodeIndex + 1) < episodeList.length;\n\n    function playNext() {\n\n        if(hasNext) {\n            setcurrentEpisodeIndex(currentEpisodeIndex + 1);\n        }\n    }\n\n    function playPrevious() {\n        if(hasPrevious) {\n            setcurrentEpisodeIndex(currentEpisodeIndex - 1);\n        }\n    }\n\n    return (\n        <PlayerContext.Provider value={{ \n            episodeList, \n            currentEpisodeIndex, \n            play, \n            isPlaying, \n            isLooping,\n            togglePlay,\n            toggleLoop,\n            setPlayingState,\n            playList,\n            playNext,\n            playPrevious,\n            hasNext,\n            hasPrevious,\n        }}>\n            { children }\n        </PlayerContext.Provider>\n    )\n}\n\nexport const usePlayer = () => {\n    return useContext(PlayerContext)\n}"]},"metadata":{},"sourceType":"module"}